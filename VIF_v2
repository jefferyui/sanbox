import pandas as pd
import numpy as np

# 建立範例 DataFrame
np.random.seed(42)
num_samples = 100

df = pd.DataFrame({
    'Age': np.random.normal(30, 10, num_samples).round(1),
    'Fare': np.random.exponential(30, num_samples).round(2),
    'Height': np.random.normal(170, 10, num_samples).round(1),
    'Weight': np.random.normal(65, 15, num_samples).round(1),
    'Pclass': np.random.choice([1, 2, 3], num_samples),
    'SibSp': np.random.randint(0, 5, num_samples),
    'Gender': np.random.choice(['Male', 'Female'], num_samples),
    'City': np.random.choice(['Taipei', 'Tokyo', 'New York'], num_samples),
    'Category': np.random.choice(['A', 'B', 'C', 'D'], num_samples)
})

# import ace_tools as tools; tools.display_dataframe_to_user(name="範例資料集 (df_example)", dataframe=df_example)
import pandas as pd
import numpy as np
from sklearn.preprocessing import LabelEncoder
from statsmodels.stats.outliers_influence import variance_inflation_factor
from statsmodels.tools.tools import add_constant
from scipy.cluster.hierarchy import linkage, fcluster
from scipy.spatial.distance import pdist

def group_features_by_correlation(
    df: pd.DataFrame,
    corr_threshold: float = 0.8,
    encoding_cols: list = None
):
    """
    1. Label encode 類別欄位
    2. 計算 VIF
    3. 用 pdist + linkage 做階層分群（基於 1 - abs(corr)）
    4. 以 corr_threshold 分群
    5. 回傳 VIF 表格與 feature groups
    """
    # 複製並 Label Encoding
    df2 = df.copy()
    if encoding_cols is None:
        encoding_cols = df2.select_dtypes(include=['object', 'category']).columns.tolist()
    le = LabelEncoder()
    for col in encoding_cols:
        df2[col] = df2[col].fillna('NA')
        df2[col] = le.fit_transform(df2[col])

    # 保留所有數值特徵
    X = df2.select_dtypes(include=['number']).dropna()

    # 計算 VIF
    X_const = add_constant(X)
    vif_data = []
    for i, feat in enumerate(X_const.columns):
        vif_data.append({
            'feature': feat,
            'VIF': variance_inflation_factor(X_const.values, i)
        })
    vif_df = pd.DataFrame(vif_data).sort_values('VIF', ascending=False).reset_index(drop=True)

    # 計算特徵間距離（使用 1 - abs(corr)）
    # pdist expects observations in rows; here我們把 features 當作 observations，故對 X.T 取 pdist
    dist_vec = pdist(X.T, metric=lambda u, v: 1 - abs(np.corrcoef(u, v)[0, 1]))

    # 階層分群
    Z = linkage(dist_vec, method='average')
    # threshold for fcluster is distance = 1 - corr_threshold
    cluster_labels = fcluster(Z, t=1 - corr_threshold, criterion='distance')

    # 收集每群特徵
    features = X.columns.tolist()
    groups = {}
    for feat, cl in zip(features, cluster_labels):
        groups.setdefault(cl, []).append(feat)

    return vif_df, groups

# 使用範例
vif_df, feature_groups = group_features_by_correlation(df, corr_threshold=0.8)

print("=== VIF 排序 ===")
print(vif_df)

print("\n=== 相關分群 (|corr| >= 0.8) ===")
for grp, feats in feature_groups.items():
    print(f"群 {grp}: {feats}")
