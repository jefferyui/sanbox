https://medium.com/@jagota-arun/online-change-point-detection-in-time-series-a5ab1aab10a2
Method 1: Offline CPD On A Sliding Window

In this approach, we slide a window of a certain width over the time series at a regular cadence such as every time step. We then apply some offline CPD method to the window at any particular instance. Such as CUMSUM.


https://jagota-arun.medium.com/cumsum-for-change-point-detection-in-time-series-4d076324e0bb

A New Coefficient of Correlation
https://medium.com/towards-data-science/a-new-coefficient-of-correlation-64ae4f260310

## Python Function ##
from numpy import array, random, arange

def xicor(X, Y, ties=True):
    random.seed(42)
    n = len(X)
    order = array([i[0] for i in sorted(enumerate(X), key=lambda x: x[1])])
    if ties:
        l = array([sum(y >= Y[order]) for y in Y[order]])
        r = l.copy()
        for j in range(n):
            if sum([r[j] == r[i] for i in range(n)]) > 1:
                tie_index = array([r[j] == r[i] for i in range(n)])
                r[tie_index] = random.choice(r[tie_index] - arange(0, sum([r[j] == r[i] for i in range(n)])), sum(tie_index), replace=False)
        return 1 - n*sum( abs(r[1:] - r[:n-1]) ) / (2*sum(l*(n - l)))
    else:
        r = array([sum(y >= Y[order]) for y in Y[order]])
        return 1 - 3 * sum( abs(r[1:] - r[:n-1]) ) / (n**2 - 1)

## Julia Function ##
import Random
function xicor(X::AbstractVector, Y::AbstractVector, ties::Bool=true)
    Random.seed!(42)
    n = length(X)
    if ties
        l = [sum(y .>= Y[sortperm(X)]) for y ∈ Y[sortperm(X)]]
        r = copy(l)
        for j ∈ 1:n
            if sum([r[j] == r[i] for i ∈ 1:n]) > 1
                tie_index = [r[j] == r[i] for i ∈ 1:n]
                r[tie_index] = Random.shuffle(r[tie_index] .- (0:sum([r[j] == r[i] for i ∈ 1:n])-1))
            end
        end
        return 1 - n*sum( abs.(r[2:end] - r[1:n-1]) ) / (2*sum(l.*(n .- l)))
    else
        r = [sum(y .>= Y[sortperm(X)]) for y ∈ Y[sortperm(X)]]
        return 1 - 3 * sum( abs.(r[2:end] - r[1:end-1]) ) / (n^2 - 1)
    end
end

https://ctruong.perso.math.cnrs.fr/ruptures-docs/build/html/detection/bottomup.html

https://blog.csdn.net/wallace_www/article/details/101363199
https://gregorygundersen.com/blog/2019/08/13/bocd/
Bayesian online changepoint detection
pip install bayesian_changepoint_detection

import numpy as np
import matplotlib.pyplot as plt
from bayesian_changepoint_detection.online_changepoint_detection import OnlineChangePointDetection

# Generate synthetic data (e.g., sine wave with an abrupt change)
time = np.linspace(0, 10, 1000)
normal_data = np.sin(time)  # Normal data (sine wave)
anomaly_data = np.sin(time) + 0.5 * np.random.randn(1000)  # Anomaly (sudden jump)

# Initialize the changepoint detector
detector = OnlineChangePointDetection()

# Update the detector with data points
for data_point in anomaly_data:
    detector.update(data_point)

# Get the probabilities of changepoints
changepoint_probs = detector.get_probabilities()

# Set a threshold for anomaly detection (e.g., 0.8)
threshold = 0.8
detected_anomalies = np.where(changepoint_probs > threshold)[0]

# Plot the results
plt.figure(figsize=(10, 6))
plt.plot(time, normal_data, label='Normal Data', color='blue')
plt.plot(time, anomaly_data, label='Anomaly Data', color='red')
plt.scatter(time[detected_anomalies], anomaly_data[detected_anomalies], color='red', marker='x', label='Detected Anomalies')
plt.xlabel('Time')
plt.ylabel('Value')
plt.title('Bayesian Online Changepoint Detection')
plt.legend()

https://www.iese.fraunhofer.de/blog/change-point-detection/
plt.show()

https://github.com/y-bar/bocd/tree/master/notebook
https://pro.arcgis.com/ja/pro-app/latest/tool-reference/space-time-pattern-mining/change-point-detection.htm

https://zillow.github.io/luminaire/tutorial/dataprofiling.html
