feature columns input keras API
https://github.com/tensorflow/tensorflow/issues/27416
https://blog.csdn.net/l491899327/article/details/108691096
https://stackoverflow.com/questions/55421386/tensorflow-keras-how-to-convert-tf-feature-column-into-input-tensors
https://stackoverflow.com/questions/55421386/tensorflow-keras-how-to-convert-tf-feature-column-into-input-tensors
https://blog.csdn.net/qq_33793792/article/details/104358366
https://www.runoob.com/python/att-dictionary-values.html

https://stackoverflow.com/questions/58769933/serving-a-tensorflow-2-keras-model-with-feature-columns-and-preprocessing-migra
https://dantegates.github.io/2019/10/24/tensorflow-2-feature-columns-and-keras.html
https://stackoverflow.com/questions/54375298/how-to-use-tensorflow-feature-columns-as-input-to-a-keras-model



https://stackoverflow.com/questions/63239226/usage-of-tf-keras-layers-densefeatures
feature_columns = []
bins = [-125, -75, -50, -25, 0, 25, 50, 75, 125]
temp_num = feature_column.numeric_column('temp')
temp_buckets = feature_column.bucketized_column(temp_num, boundaries=bins)
feature_columns.append(temp_buckets)
feature_layer = tf.keras.layers.DenseFeatures(feature_columns)

# create a dictionary to associate column names with column values
inputs = {}
inputs["temp_num"] = tf.keras.Input(shape=(1,), name="temp_num") 

# convert FeatureColumns into a single tensor layer
x = feature_layer(inputs)

x = tf.keras.layers.Dense(128, activation='relu')(x)
x = tf.keras.layers.Dense(128, activation='relu')(x)
x = tf.keras.layers.Dropout(.1)(x)
out = tf.keras.layers.Dense(1)(x)

model = tf.keras.Model(inputs=dict(inputs), outputs=out)





#################################################################################################
https://stackoverflow.com/questions/55421386/tensorflow-keras-how-to-convert-tf-feature-column-into-input-tensors
# This you have defined feauture column
kid_youngest_month = feature_column.numeric_column("kid_youngest_month")
     kid_age_youngest_buckets = feature_column.bucketized_column(kid_youngest_month, boundaries=[12, 24, 36, 72, 96])

# Then define layer
feature_layer = tf.keras.layers.DenseFeatures(kid_age_youngest_buckets)

# The inputs for DenseFeature layer should be define for each original feature column as dictionary, where
# keys - names of feature columns
# values - tf.keras.Input with shape =(1,), name='name_of_feature_column', dtype - actual type of original column 
feature_layer_inputs = {}
feature_layer_inputs['kid_youngest_month'] = tf.keras.Input(shape=(1,), name='kid_youngest_month', dtype=tf.int8)

# Then you can collect inputs of other layers and feature_layer_inputs into one list 
inputs=[review_meta_id_input, priors_input, [v for v in feature_layer_inputs.values()]]

# Then define outputs of this DenseFeature layer
feature_layer_outputs = feature_layer(feature_layer_inputs)
# And pass them into other layer like any other
x = tf.keras.layers.Dense(256, activation='relu')(feature_layer_outputs)
# Or maybe concatenate them with outputs from your others layers
combined = tf.keras.layers.concatenate([x, feature_layer_outputs])

#And probably you will finish with last output layer, maybe like this for calssification
o=tf.keras.layers.Dense(classes_number, activation='softmax', name='sequential_output')(combined)

#So you pass to the model:

model_combined = tf.keras.models.Model(inputs=[s_inputs, [v for v in feature_layer_inputs.values()]], outputs=o)



##################################################################################################


https://stackoverflow.com/questions/63239226/usage-of-tf-keras-layers-densefeatures
feature_columns = []
bins = [-125, -75, -50, -25, 0, 25, 50, 75, 125]
temp_num = feature_column.numeric_column('temp')
temp_buckets = feature_column.bucketized_column(temp_num, boundaries=bins)
feature_columns.append(temp_buckets)
feature_layer = tf.keras.layers.DenseFeatures(feature_columns)

# create a dictionary to associate column names with column values
inputs = {}
inputs["temp_num"] = tf.keras.Input(shape=(1,), name="temp_num") 

# convert FeatureColumns into a single tensor layer
x = feature_layer(inputs)

x = tf.keras.layers.Dense(128, activation='relu')(x)
x = tf.keras.layers.Dense(128, activation='relu')(x)
x = tf.keras.layers.Dropout(.1)(x)
out = tf.keras.layers.Dense(1)(x)

model = tf.keras.Model(inputs=dict(inputs), outputs=out)

tf.keras.layers.DenseFeatures
https://medium.com/ml-book/demonstration-of-tensorflow-feature-columns-tf-feature-column-3bfcca4ca5c4
https://medium.com/ml-book/train-tf-keras-model-using-feature-coulmn-8de12e65ddec
https://medium.com/ml-book/train-linear-model-and-boosted-tree-model-in-tensorflow-2-0-using-feature-columns-5e0b4ce4bd4

Input(shape(1,)) python
https://ithelp.ithome.com.tw/articles/10234389
https://ithelp.ithome.com.tw/articles/10234389
from tensorflow.keras import layers

num_tags = 12  # Number of unique issue tags
num_words = 10000  # Size of vocabulary obtained when preprocessing text data
num_departments = 4  # Number of departments for predictions

title_input = keras.Input(
    shape=(None,), name="title"
)  # Variable-length sequence of ints
body_input = keras.Input(shape=(None,), name="body")  # Variable-length sequence of ints
tags_input = keras.Input(
    shape=(num_tags,), name="tags"
)  # Binary vectors of size `num_tags`

# Embed each word in the title into a 64-dimensional vector
title_features = layers.Embedding(num_words, 64)(title_input)
# Embed each word in the text into a 64-dimensional vector
body_features = layers.Embedding(num_words, 64)(body_input)

# Reduce sequence of embedded words in the title into a single 128-dimensional vector
title_features = layers.LSTM(128)(title_features)
# Reduce sequence of embedded words in the body into a single 32-dimensional vector
body_features = layers.LSTM(32)(body_features)

# Merge all available features into a single large vector via concatenation
x = layers.concatenate([title_features, body_features, tags_input])

# Stick a logistic regression for priority prediction on top of the features
priority_pred = layers.Dense(1, name="priority")(x)
# Stick a department classifier on top of the features
department_pred = layers.Dense(num_departments, name="department")(x)

# Instantiate an end-to-end model predicting both priority and department
model = keras.Model(
    inputs=[title_input, body_input, tags_input],
    outputs=[priority_pred, department_pred],
)

# show_shapes=True：Layer 含 Input/Output 資訊
tf.keras.utils.plot_model(model, "multi_input_and_output_model.png", show_shapes=True)
#############################
